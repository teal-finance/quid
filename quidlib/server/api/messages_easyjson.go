// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi(in *jlexer.Lexer, out *userRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi(out *jwriter.Writer, in userRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi1(in *jlexer.Lexer, out *userOrgRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int64(in.Int64())
		case "org_id":
			out.OrgID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi1(out *jwriter.Writer, in userOrgRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"org_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrgID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userOrgRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userOrgRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userOrgRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userOrgRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi1(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi2(in *jlexer.Lexer, out *userHandlerCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi2(out *jwriter.Writer, in userHandlerCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userHandlerCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userHandlerCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userHandlerCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userHandlerCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi2(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi3(in *jlexer.Lexer, out *userGroupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int64(in.Int64())
		case "group_id":
			out.GroupID = int64(in.Int64())
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi3(out *jwriter.Writer, in userGroupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.GroupID))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userGroupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userGroupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userGroupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userGroupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi3(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi4(in *jlexer.Lexer, out *unInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin":
			out.Admin = bool(in.Bool())
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi4(out *jwriter.Writer, in unInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Admin))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v unInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v unInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *unInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *unInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi4(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi5(in *jlexer.Lexer, out *statusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "ns":
			(out.Ns).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi5(out *jwriter.Writer, in statusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ns\":"
		out.RawString(prefix)
		(in.Ns).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v statusResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v statusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *statusResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *statusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi5(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi6(in *jlexer.Lexer, out *refreshMaxTTLRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "refresh_max_ttl":
			out.RefreshMaxTTL = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi6(out *jwriter.Writer, in refreshMaxTTLRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"refresh_max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.RefreshMaxTTL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v refreshMaxTTLRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v refreshMaxTTLRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *refreshMaxTTLRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *refreshMaxTTLRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi6(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi7(in *jlexer.Lexer, out *passwordRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi7(out *jwriter.Writer, in passwordRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v passwordRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v passwordRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *passwordRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *passwordRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi7(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi8(in *jlexer.Lexer, out *nonAdminUsersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi8(out *jwriter.Writer, in nonAdminUsersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v nonAdminUsersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v nonAdminUsersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *nonAdminUsersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *nonAdminUsersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi8(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi9(in *jlexer.Lexer, out *namespaceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi9(out *jwriter.Writer, in namespaceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v namespaceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v namespaceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *namespaceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *namespaceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi9(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi10(in *jlexer.Lexer, out *namespaceIDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi10(out *jwriter.Writer, in namespaceIDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v namespaceIDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v namespaceIDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *namespaceIDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *namespaceIDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi10(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi11(in *jlexer.Lexer, out *namespaceCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "max_ttl":
			out.MaxTTL = string(in.String())
		case "refresh_max_ttl":
			out.RefreshMaxTTL = string(in.String())
		case "enable_endpoint":
			out.EnableEndpoint = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi11(out *jwriter.Writer, in namespaceCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.MaxTTL))
	}
	{
		const prefix string = ",\"refresh_max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.RefreshMaxTTL))
	}
	{
		const prefix string = ",\"enable_endpoint\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnableEndpoint))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v namespaceCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v namespaceCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *namespaceCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *namespaceCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi11(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi12(in *jlexer.Lexer, out *nameRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi12(out *jwriter.Writer, in nameRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v nameRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v nameRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *nameRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *nameRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi12(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi13(in *jlexer.Lexer, out *maxTTLRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "max_ttl":
			out.MaxTTL = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi13(out *jwriter.Writer, in maxTTLRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.MaxTTL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v maxTTLRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v maxTTLRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *maxTTLRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *maxTTLRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi13(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi14(in *jlexer.Lexer, out *infoRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi14(out *jwriter.Writer, in infoRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v infoRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v infoRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *infoRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *infoRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi14(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi15(in *jlexer.Lexer, out *groupCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi15(out *jwriter.Writer, in groupCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v groupCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v groupCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *groupCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *groupCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi15(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi16(in *jlexer.Lexer, out *availability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "enable":
			out.Enable = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi16(out *jwriter.Writer, in availability) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"enable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v availability) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v availability) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *availability) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *availability) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi16(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi17(in *jlexer.Lexer, out *administratorsCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_i_ds":
			if in.IsNull() {
				in.Skip()
				out.UserIDs = nil
			} else {
				in.Delim('[')
				if out.UserIDs == nil {
					if !in.IsDelim(']') {
						out.UserIDs = make([]int64, 0, 8)
					} else {
						out.UserIDs = []int64{}
					}
				} else {
					out.UserIDs = (out.UserIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.UserIDs = append(out.UserIDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi17(out *jwriter.Writer, in administratorsCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_i_ds\":"
		out.RawString(prefix[1:])
		if in.UserIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.UserIDs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v administratorsCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v administratorsCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *administratorsCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *administratorsCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi17(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi18(in *jlexer.Lexer, out *administratorDeletion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int64(in.Int64())
		case "namespace_id":
			out.NamespaceID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi18(out *jwriter.Writer, in administratorDeletion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NamespaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v administratorDeletion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v administratorDeletion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *administratorDeletion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *administratorDeletion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi18(l, v)
}
func easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi19(in *jlexer.Lexer, out *accessTokenRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refresh_token":
			out.RefreshToken = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi19(out *jwriter.Writer, in accessTokenRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.RefreshToken))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v accessTokenRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v accessTokenRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeGithubComTealFinanceQuidQuidlibServerApi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *accessTokenRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *accessTokenRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeGithubComTealFinanceQuidQuidlibServerApi19(l, v)
}
