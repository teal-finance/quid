// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package server

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer(in *jlexer.Lexer, out *UserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer(out *jwriter.Writer, in UserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer1(in *jlexer.Lexer, out *UserOrgRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "usr_id":
			out.UsrID = int64(in.Int64())
		case "org_id":
			out.OrgID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer1(out *jwriter.Writer, in UserOrgRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"usr_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UsrID))
	}
	{
		const prefix string = ",\"org_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrgID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOrgRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOrgRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOrgRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOrgRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer1(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer2(in *jlexer.Lexer, out *UserHandlerCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer2(out *jwriter.Writer, in UserHandlerCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserHandlerCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserHandlerCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserHandlerCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserHandlerCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer2(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer3(in *jlexer.Lexer, out *UserGroupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "usr_id":
			out.UsrID = int64(in.Int64())
		case "grp_id":
			out.GrpID = int64(in.Int64())
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer3(out *jwriter.Writer, in UserGroupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"usr_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UsrID))
	}
	{
		const prefix string = ",\"grp_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.GrpID))
	}
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserGroupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserGroupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserGroupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserGroupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer3(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer4(in *jlexer.Lexer, out *RefreshMaxTTLRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "refresh_max_ttl":
			out.RefreshMaxTTL = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer4(out *jwriter.Writer, in RefreshMaxTTLRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"refresh_max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.RefreshMaxTTL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefreshMaxTTLRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshMaxTTLRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefreshMaxTTLRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshMaxTTLRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer4(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer5(in *jlexer.Lexer, out *PublicKeyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alg":
			out.Alg = string(in.String())
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = []byte(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer5(out *jwriter.Writer, in PublicKeyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Alg))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicKeyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicKeyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicKeyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicKeyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer5(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer6(in *jlexer.Lexer, out *PasswordRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer6(out *jwriter.Writer, in PasswordRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PasswordRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PasswordRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PasswordRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PasswordRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer6(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer7(in *jlexer.Lexer, out *NonAdminUsersRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer7(out *jwriter.Writer, in NonAdminUsersRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NonAdminUsersRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NonAdminUsersRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NonAdminUsersRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NonAdminUsersRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer7(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer8(in *jlexer.Lexer, out *NamespaceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace":
			out.Namespace = string(in.String())
		case "encoding_form":
			out.EncodingForm = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer8(out *jwriter.Writer, in NamespaceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"encoding_form\":"
		out.RawString(prefix)
		out.String(string(in.EncodingForm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamespaceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamespaceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamespaceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamespaceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer8(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer9(in *jlexer.Lexer, out *NamespaceIDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer9(out *jwriter.Writer, in NamespaceIDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamespaceIDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamespaceIDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamespaceIDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamespaceIDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer9(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer10(in *jlexer.Lexer, out *NamespaceCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "alg":
			out.Alg = string(in.String())
		case "max_ttl":
			out.MaxTTL = string(in.String())
		case "refresh_max_ttl":
			out.RefreshMaxTTL = string(in.String())
		case "enable_endpoint":
			out.EnableEndpoint = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer10(out *jwriter.Writer, in NamespaceCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"alg\":"
		out.RawString(prefix)
		out.String(string(in.Alg))
	}
	{
		const prefix string = ",\"max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.MaxTTL))
	}
	{
		const prefix string = ",\"refresh_max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.RefreshMaxTTL))
	}
	{
		const prefix string = ",\"enable_endpoint\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnableEndpoint))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamespaceCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamespaceCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamespaceCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamespaceCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer10(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer11(in *jlexer.Lexer, out *NameRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer11(out *jwriter.Writer, in NameRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NameRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NameRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NameRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NameRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer11(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer12(in *jlexer.Lexer, out *MaxTTLRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "max_ttl":
			out.MaxTTL = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer12(out *jwriter.Writer, in MaxTTLRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"max_ttl\":"
		out.RawString(prefix)
		out.String(string(in.MaxTTL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MaxTTLRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MaxTTLRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MaxTTLRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MaxTTLRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer12(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer13(in *jlexer.Lexer, out *InfoRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "encoding_form":
			out.EncodingForm = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer13(out *jwriter.Writer, in InfoRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"encoding_form\":"
		out.RawString(prefix)
		out.String(string(in.EncodingForm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InfoRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InfoRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InfoRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InfoRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer13(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer14(in *jlexer.Lexer, out *GroupCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer14(out *jwriter.Writer, in GroupCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer14(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer15(in *jlexer.Lexer, out *Availability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "enable":
			out.Enable = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer15(out *jwriter.Writer, in Availability) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"enable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Availability) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Availability) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Availability) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Availability) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer15(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer16(in *jlexer.Lexer, out *AdministratorsCreation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "usr_ids":
			if in.IsNull() {
				in.Skip()
				out.UsrIDs = nil
			} else {
				in.Delim('[')
				if out.UsrIDs == nil {
					if !in.IsDelim(']') {
						out.UsrIDs = make([]int64, 0, 8)
					} else {
						out.UsrIDs = []int64{}
					}
				} else {
					out.UsrIDs = (out.UsrIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int64
					v4 = int64(in.Int64())
					out.UsrIDs = append(out.UsrIDs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer16(out *jwriter.Writer, in AdministratorsCreation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"usr_ids\":"
		out.RawString(prefix[1:])
		if in.UsrIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.UsrIDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdministratorsCreation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdministratorsCreation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdministratorsCreation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdministratorsCreation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer16(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer17(in *jlexer.Lexer, out *AdministratorDeletion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "usr_id":
			out.UsrID = int64(in.Int64())
		case "ns_id":
			out.NsID = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer17(out *jwriter.Writer, in AdministratorDeletion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"usr_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UsrID))
	}
	{
		const prefix string = ",\"ns_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NsID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdministratorDeletion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdministratorDeletion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdministratorDeletion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdministratorDeletion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer17(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer18(in *jlexer.Lexer, out *AccessTokenValidationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer18(out *jwriter.Writer, in AccessTokenValidationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessTokenValidationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessTokenValidationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessTokenValidationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessTokenValidationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer18(l, v)
}
func easyjson11d1a9baDecodeGithubComTealFinanceQuidServer19(in *jlexer.Lexer, out *AccessTokenRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refresh_token":
			out.RefreshToken = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComTealFinanceQuidServer19(out *jwriter.Writer, in AccessTokenRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.RefreshToken))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessTokenRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessTokenRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComTealFinanceQuidServer19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessTokenRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessTokenRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComTealFinanceQuidServer19(l, v)
}
