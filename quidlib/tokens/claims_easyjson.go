// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tokens

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens(in *jlexer.Lexer, out *RefreshClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace":
			out.Namespace = string(in.String())
		case "username":
			out.UserName = string(in.String())
		case "aud":
			out.Audience = string(in.String())
		case "exp":
			out.ExpiresAt = int64(in.Int64())
		case "jti":
			out.Id = string(in.String())
		case "iat":
			out.IssuedAt = int64(in.Int64())
		case "iss":
			out.Issuer = string(in.String())
		case "nbf":
			out.NotBefore = int64(in.Int64())
		case "sub":
			out.Subject = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens(out *jwriter.Writer, in RefreshClaims) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Namespace != "" {
		const prefix string = ",\"namespace\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	if in.UserName != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Audience))
	}
	if in.ExpiresAt != 0 {
		const prefix string = ",\"exp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	if in.Id != "" {
		const prefix string = ",\"jti\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"iat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IssuedAt))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"nbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NotBefore))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefreshClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefreshClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens(l, v)
}
func easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens1(in *jlexer.Lexer, out *AdminAccessClaim) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace":
			out.Namespace = string(in.String())
		case "username":
			out.UserName = string(in.String())
		case "user_id":
			out.UserID = int64(in.Int64())
		case "ns_id":
			out.NsID = int64(in.Int64())
		case "is_admin":
			out.IsAdmin = bool(in.Bool())
		case "is_ns_admin":
			out.IsNsAdmin = bool(in.Bool())
		case "aud":
			out.Audience = string(in.String())
		case "exp":
			out.ExpiresAt = int64(in.Int64())
		case "jti":
			out.Id = string(in.String())
		case "iat":
			out.IssuedAt = int64(in.Int64())
		case "iss":
			out.Issuer = string(in.String())
		case "nbf":
			out.NotBefore = int64(in.Int64())
		case "sub":
			out.Subject = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens1(out *jwriter.Writer, in AdminAccessClaim) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Namespace != "" {
		const prefix string = ",\"namespace\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	if in.UserName != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserName))
	}
	if in.UserID != 0 {
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UserID))
	}
	if in.NsID != 0 {
		const prefix string = ",\"ns_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NsID))
	}
	{
		const prefix string = ",\"is_admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsAdmin))
	}
	{
		const prefix string = ",\"is_ns_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNsAdmin))
	}
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		out.RawString(prefix)
		out.String(string(in.Audience))
	}
	if in.ExpiresAt != 0 {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExpiresAt))
	}
	if in.Id != "" {
		const prefix string = ",\"jti\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"iat\":"
		out.RawString(prefix)
		out.Int64(int64(in.IssuedAt))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		out.RawString(prefix)
		out.String(string(in.Issuer))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"nbf\":"
		out.RawString(prefix)
		out.Int64(int64(in.NotBefore))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminAccessClaim) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdminAccessClaim) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminAccessClaim) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdminAccessClaim) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens1(l, v)
}
func easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens2(in *jlexer.Lexer, out *AccessClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.UserName = string(in.String())
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]string, 0, 4)
					} else {
						out.Groups = []string{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Groups = append(out.Groups, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "orgs":
			if in.IsNull() {
				in.Skip()
				out.Orgs = nil
			} else {
				in.Delim('[')
				if out.Orgs == nil {
					if !in.IsDelim(']') {
						out.Orgs = make([]string, 0, 4)
					} else {
						out.Orgs = []string{}
					}
				} else {
					out.Orgs = (out.Orgs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Orgs = append(out.Orgs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "aud":
			out.Audience = string(in.String())
		case "exp":
			out.ExpiresAt = int64(in.Int64())
		case "jti":
			out.Id = string(in.String())
		case "iat":
			out.IssuedAt = int64(in.Int64())
		case "iss":
			out.Issuer = string(in.String())
		case "nbf":
			out.NotBefore = int64(in.Int64())
		case "sub":
			out.Subject = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens2(out *jwriter.Writer, in AccessClaims) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserName != "" {
		const prefix string = ",\"username\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserName))
	}
	if len(in.Groups) != 0 {
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Groups {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Orgs) != 0 {
		const prefix string = ",\"orgs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Orgs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Audience))
	}
	if in.ExpiresAt != 0 {
		const prefix string = ",\"exp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	if in.Id != "" {
		const prefix string = ",\"jti\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"iat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IssuedAt))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"nbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NotBefore))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB448b467EncodeGithubComTealFinanceQuidQuidlibTokens2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB448b467DecodeGithubComTealFinanceQuidQuidlibTokens2(l, v)
}
